/*
 * Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
 * or more contributor license agreements. Licensed under the Elastic License
 * 2.0; you may not use this file except in compliance with the Elastic License
 * 2.0.
 */
apply plugin: 'elasticsearch.internal-cluster-test'
apply plugin: 'elasticsearch.internal-es-plugin'
apply plugin: 'elasticsearch.internal-test-artifact'

esplugin {
  name 'apm-integration'
  description 'Provides APM integration for Elasticsearch'
  classname 'org.elasticsearch.xpack.apm.APM'
  extendedPlugins = ['x-pack-core']
}

dependencies {
  implementation "io.opentelemetry:opentelemetry-api:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-api-metrics:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-context:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-trace:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-common:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-sdk-metrics:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-semconv:${versions.opentelemetry}-alpha"
  implementation "io.opentelemetry:opentelemetry-exporter-logging:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-exporter-otlp-trace:${versions.opentelemetry}"
  implementation "io.opentelemetry:opentelemetry-exporter-otlp-common:${versions.opentelemetry}" // required by opentelemetry-exporter-otlp-trace
  implementation "io.grpc:grpc-api:1.42.1"
  implementation "io.grpc:grpc-stub:1.42.1"
  implementation "com.squareup.okhttp3:okhttp:3.14.9" // required by opentelemetry-exporter-otlp-trace
  implementation "com.squareup.okio:okio:1.17.2"      // required by okhttp3

  compileOnly project(path: xpackModule('core'))
  internalClusterTestImplementation(testArtifact(project(xpackModule('core'))))
}

// no unit-test for now
tasks.named("test").configure { enabled = false }

tasks.named("thirdPartyAudit").configure {
  ignoreViolations(
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueConsumerIndexField',
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerIndexField',
    'io.opentelemetry.internal.shaded.jctools.queues.MpscArrayQueueProducerLimitField',
    'io.opentelemetry.internal.shaded.jctools.util.UnsafeAccess',
    'io.opentelemetry.internal.shaded.jctools.util.UnsafeRefArrayAccess'
  )
  ignoreMissingClasses(
    'io.opentelemetry.sdk.logs.data.Body',
    'io.opentelemetry.sdk.logs.data.LogData',
  )
}
